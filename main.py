import datetime
import os
import random
import threading
import time

import django
import telebot
from telebot.types import LabeledPrice

import buttons
from const import bot, admin_bot

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Ad_bot.settings')
django.setup()
from app.models import User, Ad
from django.utils import timezone


def send_ad():
    while True:
        n = timezone.now()
        if n.minute == 0:
            day = n.day
            month = n.month
            year = n.year
            hours = n.hour
            s = f"{day}.{month}.{year} {hours}:00"
            ads = Ad.objects.filter(date=s)
            for ad in ads:
                text = f'–ò–º—è: {ad.name}\n' \
                       f'–†–æ–ª—å: {ad.role}\n' \
                       f'–ù–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º: {ad.username}\n' \
                       f'–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {ad.marketplace}\n' \
                       f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ad.category}\n' \
                       f'–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {ad.successes}\n' \
                       f'–û –Ω–∞—Å: {ad.about_as}\n' \
                       f'–ö–æ–≥–æ –∏—â–µ–º: {ad.who}'
                bot.send_message(chat_id='-1002120671637', text=text)
            time.sleep(60 * 60)
        else:
            time.sleep(60)


def enter_who(message, chat_id, user, name, role, username, marketplace, category, successes, about_as):
    if message.content_type == 'text':
        who = message.text
        ad = Ad.objects.create(
            name=name,
            role=role,
            username=username,
            marketplace=marketplace,
            category=category,
            successes=successes,
            about_as=about_as,
            who=who
        )
        user.ad.add(ad)
        text = f'–ò–º—è: {name}\n' \
               f'–†–æ–ª—å: {role}\n' \
               f'–ù–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º: {username}\n' \
               f'–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {marketplace}\n' \
               f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n' \
               f'–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {successes}\n' \
               f'–û –Ω–∞—Å: {about_as}\n' \
               f'–ö–æ–≥–æ –∏—â–µ–º: {who}'
        prices = [LabeledPrice(label="XTR", amount=1)]
        bot.send_invoice(chat_id=chat_id,
                         title='–û–ø–ª–∞—Ç–∞ —Ä–µ–∫–ª–∞–º—ã',
                         description=text,
                         prices=prices,
                         currency='XTR',
                         invoice_payload='channel_support',
                         provider_token='',
                         reply_markup=buttons.pay(ad.id))


def enter_about_as(message, chat_id, user, name, role, username, marketplace, category, successes):
    if message.content_type == 'text':
        about_as = message.text
        text = '8/9. ‚ñ™Ô∏è–ö–∞–∫–æ–≥–æ —Å–µ–ª–ª–µ—Ä–∞ –∏ –∫–æ–º–ø–∞–Ω–∏—é –≤—ã –∏—â–µ—Ç–µ, –æ–ø–∏—à–∏—Ç–µ –∏—Ö\n\n' \
               '–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:\n\n' \
               '‚Äî –æ–ø—ã—Ç –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω\n' \
               '‚Äî —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞\n' \
               '‚Äî —Ä–∞–±–æ—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ —É—á–µ—Ç–∞\n' \
               '‚Äî —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞\n' \
               '‚Äî –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ –≤ –∑–ø'
        msg = bot.send_message(chat_id=chat_id, text=text)
        bot.register_next_step_handler(msg, enter_who, chat_id, user, name, role, username, marketplace, category,
                                       successes, about_as)


def enter_successes(message, chat_id, user, name, role, username, marketplace, category):
    if message.content_type == 'text':
        successes = message.text
        text = '7/9. ‚ñ™Ô∏è–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ\n\n' \
               '–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:\n\n' \
               'üìç–†–∞–±–æ—Ç–∞—é 2 –≥–æ–¥–∞\n' \
               'üìç–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n' \
               'üìç–í–ª–∞–¥–µ–Ω–∏–µ —Ñ–æ—Ç–æ—à–æ–ø–æ–º (—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç)'
        msg = bot.send_message(chat_id=chat_id, text=text)
        bot.register_next_step_handler(msg, enter_about_as, chat_id, user, name, role, username, marketplace, category,
                                       successes)


def enter_category(message, chat_id, user, name, role, username, marketplace):
    if message.content_type == 'text':
        category = message.text
        text = '6/9. üí∞–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ —É—Å–ø–µ—Ö–∞–º–∏\n\n' \
               '–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: \n\n' \
               '‚Äî —Ä–∞–∑–≤–∏–ª –º–∞–≥–∞–∑–∏–Ω —Å 100 000 —Ä—É–±–ª–µ–π –¥–æ 1 200 000 —Ä—É–±–ª–µ–π –∑–∞ 3 –º–µ—Å—è—Ü–∞\n' \
               '‚Äî –º–∞–≥–∞–∑–∏–Ω–∞ 1 000 000 –≤—ã—Ä—É—á–∫–∏ –≤ –º–µ—Å—è—Ü'
        msg = bot.send_message(chat_id=chat_id, text=text)
        bot.register_next_step_handler(msg, enter_successes, chat_id, user, name, role, username, marketplace, category)


def enter_marketplace(message, chat_id, user, name, role, username):
    if message.content_type == 'text':
        marketplace = message.text
        text = '5/9. –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤'
        msg = bot.send_message(chat_id=chat_id, text=text, reply_markup=None)
        bot.register_next_step_handler(msg, enter_category, chat_id, user, name, role, username, marketplace)


def enter_username(message, chat_id, user, name, role):
    if message.content_type == 'text':
        username = message.text
        text = '4/9. –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π'
        msg = bot.send_message(chat_id=chat_id, text=text, reply_markup=buttons.choose_marketplace())
        bot.register_next_step_handler(msg, enter_marketplace, chat_id, user, name, role, username)


def enter_role(message, chat_id, user, name):
    if message.content_type == 'text':
        role = message.text
        if role not in ['–ú–µ–Ω–µ–¥–∂–µ—Ä', '–°–µ–ª–ª–µ—Ä']:
            msg = bot.send_message(chat_id=chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π',
                                   reply_markup=buttons.choose_role())
            bot.register_next_step_handler(msg, enter_role, chat_id, user, name)
        else:
            text = '3/9. –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –¥–ª—è —Å–≤—è–∑–∏\n\n' \
                   '–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:\n\n' \
                   '@redmilliard'
            msg = bot.send_message(chat_id=chat_id, text=text, reply_markup=None)
            bot.register_next_step_handler(msg, enter_username, chat_id, user, name, role)


def enter_name(message, chat_id, user):
    if message.content_type == 'text':
        name = message.text
        text = '2/9. –í—ã –º–µ–Ω–µ–¥–∂–µ—Ä –∏–ª–∏ —Å–µ–ª–ª–µ—Ä\n\n' \
               '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É'
        msg = bot.send_message(chat_id=chat_id, text=text, reply_markup=buttons.choose_role())
        bot.register_next_step_handler(msg, enter_role, chat_id, user, name)


@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user, _ = User.objects.get_or_create(chat_id=chat_id)
    menu(chat_id=chat_id, user=user)


def menu(chat_id, user):
    pay = user.ad.all()
    text = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n' \
           f'–û–ø–ª–∞—á–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π ‚Äî {pay.count()}\n' \
           f'–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ/–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π ‚Äî {pay.filter(is_check=True).count()}\n\n' \
           '–ß—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –æ—Ç–≤–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:\n\n' \
           '1/9. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è'
    msg = bot.send_message(chat_id=chat_id, text=text)
    bot.register_next_step_handler(msg, enter_name, chat_id, user)


@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                  error_message="Aliens tried to steal your card's CVV, but we successfully protected your credentials,"
                                                " try to pay again in a few minutes, we need a small rest.")


@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    chat_id = message.chat.id
    user = User.objects.get(chat_id=chat_id)
    ad = user.ad.last()
    admin = random.choice(User.objects.filter(is_admin=True))
    try:
        bot.delete_message(chat_id=chat_id, message_id=message.id)
    except Exception:
        pass
    text = f'–ò–º—è: {ad.name}\n' \
           f'–†–æ–ª—å: {ad.role}\n' \
           f'–ù–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º: {ad.username}\n' \
           f'–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {ad.marketplace}\n' \
           f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ad.category}\n' \
           f'–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {ad.successes}\n' \
           f'–û –Ω–∞—Å: {ad.about_as}\n' \
           f'–ö–æ–≥–æ –∏—â–µ–º: {ad.who}'
    admin_bot.send_message(chat_id=admin.chat_id, text=text,
                           reply_markup=buttons.admin_buttons(user_id=user.chat_id, ad_id=ad.id))


@admin_bot.message_handler(commands=['start'])
def admin_start(message):
    if User.objects.filter(chat_id=message.chat.id, is_admin=True):
        admin_bot.send_message(chat_id=message.chat.id, text='–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å, –æ–∂–∏–¥–∞–π—Ç–µ –∑–∞—è–≤–æ–∫')


def choose_date(chat_id, ad_id):
    bot.send_message(chat_id=chat_id, text='–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ, –≤—ã–¥–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è',
                     reply_markup=buttons.choose_date(ad_id=ad_id))


@admin_bot.callback_query_handler(func=lambda call: True)
def callback(call):
    message_id = call.message.id
    chat_id = call.message.chat.id
    try:
        admin_bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception:
        pass
    try:
        admin_bot.delete_message(chat_id=chat_id, message_id=message_id - 1)
    except Exception:
        pass
    if call.message:
        data = call.data.split('|')
        if data[0] == 'accept':
            choose_date(chat_id=data[1], ad_id=data[2])


def choose_time(chat_id, date, ad_id):
    bot.send_message(chat_id=chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è',
                     reply_markup=buttons.choose_time(date=date, ad_id=ad_id))


def set_send_time(chat_id, time, ad_id):
    ad = Ad.objects.get(id=ad_id)
    ad.send_date = time
    ad.save(update_fields=['send_date'])
    bot.send_message(chat_id=chat_id, text=f'–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {time}')


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    message_id = call.message.id
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    user = User.objects.filter(chat_id=user_id).first()
    try:
        bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception:
        pass
    try:
        bot.delete_message(chat_id=chat_id, message_id=message_id - 1)
    except Exception:
        pass
    if call.message:
        data = call.data.split('|')
        bot.clear_step_handler_by_chat_id(chat_id=chat_id)
        msg = bot.send_message(chat_id=chat_id, text='.', reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.delete_message(chat_id=chat_id, message_id=msg.id)
        if data[0] == 'change':
            try:
                Ad.objects.get(id=data[1]).delete()
            except Exception:
                pass
            menu(chat_id=chat_id, user=user)
        elif data[0] == 'date':
            choose_time(chat_id=chat_id, date=data[1], ad_id=data[2])
        elif data[0] == 'time':
            set_send_time(chat_id=chat_id, time=data[1], ad_id=data[2])


def run_user_bot():
    bot.polling(none_stop=True)


def run_admin_bot():
    admin_bot.polling(none_stop=True)


if __name__ == '__main__':
    run_user_bot = threading.Thread(target=run_user_bot)
    run_user_bot.start()
    run_admin_bot = threading.Thread(target=run_admin_bot)
    run_admin_bot.start()
    send_ad = threading.Thread(target=send_ad)
    send_ad.start()
